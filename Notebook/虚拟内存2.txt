页式管理
虚拟地址=页号+偏移量
物理地址=帧号+偏移量
页表>>地址映射

段式管理
1.进程分段(逻辑含义)
2.内存分块(动态,类似动态分区) 
虚拟地址=段号+偏移量
物理地址=快好+偏移量x(首地址+偏移量)
段表,P,M
两条路径(P==0,P==1)

段页式管理
1.进程先分段,段在分页
2.内存分帧
3.页帧等大小
虚拟地址=段号+页号+偏移量x物理渎职=帧号+偏移量x地址映射<=段表+页表
一个进程有一个段表,多个页表(一个段一个页表)
段表的作用:找到该段对应的页表首地址
页表的作用:找到帧号,形成物理地址
段表,没有P,M(所有页表都在内存中)
页表,P,M(作用同页式管理)
路径:2条(P==0,P==1)

OS软件如何实现内存管理:
1.选择内存管理方式
页式/段式/段页式管理
2.选择四种策略的具体做法
a.读取策略
(1)请求式读取:需要的时后读取
(2)预约式读取:提起那批量读(前提条件:这些页在硬盘上连续存放>>读取的代价小)(可能不用)
b.放置策略
(1)段式:Best,First,Next
(2)页式/段页式:随机(访问时间与存储位置的无关性)
[内存的两个特性:线性编址/无关性]
c.替换策略>>选择最远的将来最不可能用到的也替换掉(内存>>辅存)
(1)OPT:未来事件,不可能实现,衡量标准
历史>>预测未来
(2);RU:最近最不常用>>局部性原理>>最近将来最不常使用
实现>>时间戳/访问栈>>代价大(更新访问频率)
(3)FIFO:最简单算法,效果不好
(4)CLOCK:LRU简化版,用U代替时间戳,选择第一个u=0的块,如遇到u=1,赋值u=0(循环)
min:1 max:n+1
希望替换掉的页不用写到硬盘
CLOCK++;
min:1 max:3n+1
第一选择u=0,m=0
第二选择u=0,m=1(u=1>>u=0)(循环)
d.清除策略
(1)请求式清除:被替换时回写
(2)预约式清除:批/簇回写

算法比较和改进
(1)算法只有适用场合之分
(2)用简单算法的代价实现复杂算法的效果>>页缓冲
3.驻留集(分配给进程的内存大小)
4.加载进程(道数)


















